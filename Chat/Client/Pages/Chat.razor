@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

@inject NavigationManager NavigationManager


<div class="container">
    <div class="card">
        <div class="card-header bg-success text-white">
            <div class="row">
                <div class="col">
                    <h2>Chat</h2>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-danger float-end">Logout</button>
                    <label class="float-end me-2 mt-2">Welcome @AuthenticationState.Name</label>
                </div>
            </div>
        </div>
        <div class="card-body messages-window">
            <div class="row">
                <div class="col-3">
                    <UserList Users="Users" />
                </div>
                <div class="col-9">
                    <ChatMessages />
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private HubConnection? _hubConnection;

    public ICollection<string> Users { get; set; } = new HashSet<string>();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if(!AuthenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _hubConnection = ConfigureHubConnection();
            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync(nameof(IChatHubServer.ConnectUser), AuthenticationState.Name);
        }
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
                            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/chat"))
                            .Build();

        hubConnection.On<string>(nameof(IChatHubClient.UserConnected), (userName) =>
        {
            Users.Add(userName);
            StateHasChanged();
        });

        hubConnection.On<ICollection<string>>(nameof(IChatHubClient.ConnectedUsersList), (userName) =>
       {
           Users = userName;
           StateHasChanged();
       });
        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null)
        await _hubConnection.DisposeAsync();
    }
}
